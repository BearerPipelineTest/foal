(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1934],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return g}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),g=o,m=d["".concat(l,".").concat(g)]||d[g]||u[g]||i;return t?r.createElement(m,a(a({ref:n},p),{},{components:t})):r.createElement(m,a({ref:n},p))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1770:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var r=t(2122),o=t(9756),i=(t(7294),t(3905)),a=["components"],s={title:"gRPC"},l=void 0,c={unversionedId:"api-section/gRPC",id:"api-section/gRPC",isDocsHomePage:!1,title:"gRPC",description:"gRPC is a Remote Procedure Call (RPC) framework that can run in any environment. It can connect services in and across data centers with pluggable support for load balancing, tracing, health checking and authentication. It is also applicable in last mile of distributed computing to connect devices, mobile applications and browsers to backend services.",source:"@site/i18n/es/docusaurus-plugin-content-docs/current/api-section/gRPC.md",sourceDirName:"api-section",slug:"/api-section/gRPC",permalink:"/es/docs/api-section/gRPC",editUrl:"https://github.com/FoalTS/foal/edit/master/docs/docs/api-section/gRPC.md",version:"current",frontMatter:{title:"gRPC"},sidebar:"someSidebar",previous:{title:"GraphQL",permalink:"/es/docs/api-section/graphql"},next:{title:"Single Page Applications",permalink:"/es/docs/frontend-integration/single-page-applications"}},p=[{value:"Installation &amp; Configuration",id:"installation--configuration",children:[]},{value:"The <code>gRPC</code> Service",id:"the-grpc-service",children:[]},{value:"Using Promises",id:"using-promises",children:[]},{value:"Limitations",id:"limitations",children:[]}],u={toc:p};function d(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"gRPC is a Remote Procedure Call (RPC) framework that can run in any environment. It can connect services in and across data centers with pluggable support for load balancing, tracing, health checking and authentication. It is also applicable in last mile of distributed computing to connect devices, mobile applications and browsers to backend services."),(0,i.kt)("p",null,"This page shows how to use gRPC in Foal. It is based on the ",(0,i.kt)("a",{parentName:"p",href:"https://grpc.io/docs/languages/node/basics/"},"official gRPC tutorial"),"."),(0,i.kt)("h2",{id:"installation--configuration"},"Installation & Configuration"),(0,i.kt)("p",null,"First you need to install some additional dependencies."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @grpc/grpc-js @grpc/proto-loader\nnpm install cpx2 --save-dev\n")),(0,i.kt)("p",null,"Then update your ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," so that your build scripts will correctly copy your ",(0,i.kt)("inlineCode",{parentName:"p"},".proto")," files into the ",(0,i.kt)("inlineCode",{parentName:"p"},"build/")," directory."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "build": "foal rmdir build && cpx \\"src/**/*.proto\\" build && tsc -p tsconfig.app.json",\n  "develop": "npm run build && concurrently \\"cpx \\\\\\"src/**/*.proto\\\\\\" build -w\\" \\"tsc -p tsconfig.app.json -w\\" \\"supervisor -w ./build,./config -e js,json,yml,proto --no-restart-on error ./build/index.js\\"",\n  "build:test": "foal rmdir build && cpx \\"src/**/*.proto\\" build && tsc -p tsconfig.test.json",\n  "test": "npm run build:test && concurrently \\"cpx \\\\\\"src/**/*.proto\\\\\\" build -w\\" \\"tsc -p tsconfig.test.json -w\\" \\"mocha --file ./build/test.js -w --watch-files build \\\\\\"./build/**/*.spec.js\\\\\\"\\"",\n  "build:e2e": "foal rmdir build && cpx \\"src/**/*.proto\\" build && tsc -p tsconfig.e2e.json",\n  "e2e": "npm run build:e2e && concurrently \\"cpx \\\\\\"src/**/*.proto\\\\\\" build -w\\" \\"tsc -p tsconfig.e2e.json -w\\" \\"mocha --file ./build/e2e.js -w --watch-files build \\\\\\"./build/e2e/**/*.js\\\\\\"\\"",\n    ...\n}\n')),(0,i.kt)("h2",{id:"the-grpc-service"},"The ",(0,i.kt)("inlineCode",{parentName:"h2"},"gRPC")," Service"),(0,i.kt)("p",null,"Create your ",(0,i.kt)("inlineCode",{parentName:"p"},"spec.proto")," file and save it to ",(0,i.kt)("inlineCode",{parentName:"p"},"src/app"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-proto"},'syntax = "proto3";\n\npackage helloworld;\n\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user\'s name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n')),(0,i.kt)("p",null,"Add the ",(0,i.kt)("inlineCode",{parentName:"p"},"Greeter")," service."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"services/greeter.service.ts")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"export class Greeter {\n\n  sayHello(call, callback) {\n    callback(null, {message: 'Hello ' + call.request.name});\n  }\n\n}\n\n")),(0,i.kt)("p",null,"The next step is to create a service that will instantiate the gRPC server."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"services/grpc.service.ts")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// std\nimport { join } from 'path';\n\n// 3p\nimport { dependency } from '@foal/core';\nimport * as grpc from '@grpc/grpc-js';\nimport * as protoLoader  from '@grpc/proto-loader';\n\n// App\nimport { Greeter } from './greeter.service';\n\nexport class Grpc {\n  @dependency\n  greeter: Greeter;\n\n  boot(): Promise<void> {\n    const PROTO_PATH = join(__dirname, '../spec.proto');\n    const packageDefinition = protoLoader.loadSync(\n      PROTO_PATH,\n      {\n        keepCase: true,\n        longs: String,\n        enums: String,\n        defaults: true,\n        oneofs: true\n      }\n    );\n\n    const helloProto: any = grpc.loadPackageDefinition(packageDefinition).helloworld;\n    const server = new grpc.Server();\n    server.addService(helloProto.Greeter.service, this.greeter as any);\n    // OR\n    // server.addService(helloProto.Greeter.service, {\n    //   sayHello: this.greeter.sayHello.bind(this.greeter)\n    // } as any);\n\n    return new Promise((resolve, reject) => {\n      server.bindAsync('0.0.0.0:50051', grpc.ServerCredentials.createInsecure(), error => {\n        if (error) {\n          return reject(error);\n        }\n        server.start();\n        return resolve();\n      });\n    })\n  }\n\n}\n\n")),(0,i.kt)("p",null,"Finally, inject the service in the application."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"export class AppController {\n  @dependency\n  grpc: Grpc;\n\n  // ...\n}\n\n")),(0,i.kt)("h2",{id:"using-promises"},"Using Promises"),(0,i.kt)("p",null,"Using callbacks in the grpc services can be quite tedious. To convert methods into functions that use promises, you can use the decorator below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { callbackify } from 'util';\n\nfunction async (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n  descriptor.value = callbackify(descriptor.value);\n};\n\nexport class Greeter {\n\n  @async\n  async sayHello(call) {\n    return { message: 'Hello ' + call.request.name };\n  }\n\n}\n\n")),(0,i.kt)("h2",{id:"limitations"},"Limitations"),(0,i.kt)("p",null,"The implementation above do not use Foal regular controllers. This has two consequences:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"hooks cannot be used,"),(0,i.kt)("li",{parentName:"ul"},"and error-handling is entirely managed by the gRPC server. The ",(0,i.kt)("inlineCode",{parentName:"li"},"AppController.handleError")," cannot be used.")))}d.isMDXComponent=!0}}]);