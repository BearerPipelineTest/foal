(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5219],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6774:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i=["components"],s={title:"Create Models & Queries"},c=void 0,l={unversionedId:"databases/create-models-and-queries",id:"version-1.x/databases/create-models-and-queries",isDocsHomePage:!1,title:"Create Models & Queries",description:"`shell",source:"@site/versioned_docs/version-1.x/databases/create-models-and-queries.md",sourceDirName:"databases",slug:"/databases/create-models-and-queries",permalink:"/fr/docs/1.x/databases/create-models-and-queries",editUrl:"https://github.com/FoalTS/foal/edit/master/docs/versioned_docs/version-1.x/databases/create-models-and-queries.md",version:"1.x",frontMatter:{title:"Create Models & Queries"},sidebar:"someSidebar",previous:{title:"SQL Databases (TypeORM)",permalink:"/fr/docs/1.x/databases/typeorm"},next:{title:"Generate & Run Migrations",permalink:"/fr/docs/1.x/databases/generate-and-run-migrations"}},u=[{value:"Entities",id:"entities",children:[]},{value:"Using Entities",id:"using-entities",children:[]},{value:"Queries",id:"queries",children:[]}],p={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"foal generate entity my-entity\n")),(0,o.kt)("h2",{id:"entities"},"Entities"),(0,o.kt)("p",null,"Simple models are called ",(0,o.kt)("em",{parentName:"p"},"entities")," in TypeORM. You can generate one with the above command."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class Product {\n\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column()\n  price: number;\n\n}\n\n")),(0,o.kt)("p",null,"The class ",(0,o.kt)("inlineCode",{parentName:"p"},"Product")," represents the database table and its instances represent the table rows."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"In FoalTS, entity files should always be named with the extension ",(0,o.kt)("inlineCode",{parentName:"p"},".entity.ts"),". This way the CLI can find the entities when automatically generating migrations.")),(0,o.kt)("h2",{id:"using-entities"},"Using Entities"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { getRepository } from 'typeorm';\n\nconst repository = getRepository(Product);\n\nconst product = new Product();\nproduct.name = 'chair';\nproduct.price = 60;\nawait repository.save(product);\n\nconst products = await repository.find();\n// find by id:\nconst firstProduct = await repository.findOne(1);\nconst chair = await repository.findOne({ name: 'chair' });\n\nawait repository.remove(chair);\n")),(0,o.kt)("h2",{id:"queries"},"Queries"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { getRepository } from 'typeorm';\n\nconst firstProduct = await getRepository(Product)\n  .createQueryBuilder('product')\n  .where('product.id = :id', { id: 1 })\n  .getOne();\n")))}d.isMDXComponent=!0}}]);