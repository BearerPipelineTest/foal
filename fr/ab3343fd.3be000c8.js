(window.webpackJsonp=window.webpackJsonp||[]).push([[138],{211:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return i})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return l}));var n=a(3),o=a(7),r=(a(0),a(266)),s={title:"AWS Beanstalk"},i={unversionedId:"cloud/aws-beanstalk",id:"version-1.x/cloud/aws-beanstalk",isDocsHomePage:!1,title:"AWS Beanstalk",description:"This tutorial shows how to deploy an application with an SQL database to AWS Beanstalk. It assumes that you already have an AWS account and have access to your console.",source:"@site/versioned_docs/version-1.x/cloud/aws-beanstalk.md",slug:"/cloud/aws-beanstalk",permalink:"/fr/docs/1.x/cloud/aws-beanstalk",editUrl:"https://github.com/FoalTS/foal/edit/master/docs/versioned_docs/version-1.x/cloud/aws-beanstalk.md",version:"1.x",sidebar:"someSidebar",previous:{title:"E2E Testing",permalink:"/fr/docs/1.x/testing/e2e-testing"},next:{title:"Firebase",permalink:"/fr/docs/1.x/cloud/firebase"}},c=[{value:"Prerequisites",id:"prerequisites",children:[{value:"Do not use SQLite",id:"do-not-use-sqlite",children:[]},{value:"Configure the Database Credentials",id:"configure-the-database-credentials",children:[]},{value:"Sessions",id:"sessions",children:[]}]},{value:"Create the AWS Application and Add a Database",id:"create-the-aws-application-and-add-a-database",children:[]},{value:"Deploy the Foal Application",id:"deploy-the-foal-application",children:[]},{value:"Generate &amp; Run the Database Migrations",id:"generate--run-the-database-migrations",children:[]}],p={toc:c};function l(e){var t=e.components,s=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},p,s,{components:t,mdxType:"MDXLayout"}),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"This tutorial shows how to deploy an application with an SQL database to ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://console.aws.amazon.com/elasticbeanstalk/home"}),"AWS Beanstalk"),". It assumes that you already have an AWS account and have access to your console.")),Object(r.b)("h2",{id:"prerequisites"},"Prerequisites"),Object(r.b)("h3",{id:"do-not-use-sqlite"},"Do not use SQLite"),Object(r.b)("p",null,"SQLite databases are not supported by AWS Beanstalk. You have to use a different one such as Postgres, MySQL, MariaDB, Oracle or MSSQL."),Object(r.b)("p",null,"Make sure that the SQLite driver is also uninstalled."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"npm uninstall sqlite3 connect-sqlite3\n")),Object(r.b)("h3",{id:"configure-the-database-credentials"},"Configure the Database Credentials"),Object(r.b)("p",null,"Replace your ",Object(r.b)("inlineCode",{parentName:"p"},"ormconfig.js")," (or ",Object(r.b)("inlineCode",{parentName:"p"},"ormconfig.yml")," or ",Object(r.b)("inlineCode",{parentName:"p"},"ormconfig.json"),") file with this one:"),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"ormconfig.js")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const { Config } = require('@foal/core');\n\nmodule.exports = {\n  type: Config.get('database.type'),\n  url: Config.get('database.url'),\n  database: process.env.RDS_DB_NAME || Config.get('database.name'),\n  port: process.env.RDS_PORT || Config.get('database.port'),\n  host: process.env.RDS_HOSTNAME || Config.get('database.host'),\n  username: process.env.RDS_USERNAME || Config.get('database.username'),\n  password: process.env.RDS_PASSWORD || Config.get('database.password'),\n  entities: [\"build/app/**/*.entity.js\"],\n  migrations: [\"build/migrations/*.js\"],\n  cli: {\n    \"migrationsDir\": \"src/migrations\"\n  },\n  synchronize: Config.get('database.synchronize')\n};\n\n")),Object(r.b)("p",null,"And complete your configuration file ",Object(r.b)("inlineCode",{parentName:"p"},"config/default.json")," (or ",Object(r.b)("inlineCode",{parentName:"p"},"config/default.yml"),") with your local database credentials:"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"The below credentials are an example. If you want to use them, you need to install PostgreSQL on your local host, create a database named ",Object(r.b)("inlineCode",{parentName:"p"},"my-db")," and install the postgres driver in your project (",Object(r.b)("inlineCode",{parentName:"p"},"npm install pg"),"). But you are free to use another database with other credentials if you want to.")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "settings": {\n    // ...\n  },\n  "database": {\n    "type": "postgres",\n    "name": "my-db",\n    "port": 5432,\n    "username": "postgres",\n    "synchronize": true\n  }\n}\n')),Object(r.b)("h3",{id:"sessions"},"Sessions"),Object(r.b)("h4",{id:"case-1-the-application-does-not-use-sessions"},"Case 1: The application does not use sessions"),Object(r.b)("p",null,"If you do not use sessions, then remove the store import and the store option from the ",Object(r.b)("inlineCode",{parentName:"p"},"createApp")," function in the ",Object(r.b)("inlineCode",{parentName:"p"},"src/index.ts")," file."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import 'source-map-support/register';\n\n// std\nimport * as http from 'http';\n\n// 3p\nimport { Config, createApp } from '@foal/core';\n// The store import is removed.\nimport { createConnection } from 'typeorm';\n\n// App\nimport { AppController } from './app/app.controller';\n\nasync function main() {\n  await createConnection();\n\n  // The store option is removed.\n  const app = createApp(AppController);\n\n  const httpServer = http.createServer(app);\n  const port = Config.get('port', 3001);\n  httpServer.listen(port, () => {\n    console.log(`Listening on port ${port}...`);\n  });\n}\n\nmain();\n\n")),Object(r.b)("h4",{id:"case-2-the-application-uses-sessions"},"Case 2: The application uses sessions"),Object(r.b)("p",null,"If your application uses sessions, you need to provide a ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/expressjs/session#compatible-session-stores"}),"session store"),"."),Object(r.b)("p",null,"Here is an example with ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.npmjs.com/package/connect-redis"}),"connect-redis"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import 'source-map-support/register';\n\n// std\nimport * as http from 'http';\n\n// 3p\nimport { Config, createApp } from '@foal/core';\nimport * as redisStoreFactory from 'connect-redis';\nimport { createConnection } from 'typeorm';\n\n// App\nimport { AppController } from './app/app.controller';\n\nasync function main() {\n  await createConnection();\n\n  const app = createApp(AppController, {\n    store: session => new (redisStoreFactory(session))(/* options */)\n  });\n\n  const httpServer = http.createServer(app);\n  const port = Config.get('port', 3001);\n  httpServer.listen(port, () => {\n    console.log(`Listening on port ${port}...`);\n  });\n}\n\nmain();\n\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"This guide does not explain how to set up a redis database on AWS Beanstalk.")),Object(r.b)("h2",{id:"create-the-aws-application-and-add-a-database"},"Create the AWS Application and Add a Database"),Object(r.b)("p",null,"Go to ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://console.aws.amazon.com/elasticbeanstalk/home"}),"https://console.aws.amazon.com/elasticbeanstalk/home")," and click on ",Object(r.b)("em",{parentName:"p"},"Get Started"),"."),Object(r.b)("p",null,Object(r.b)("img",{alt:"AWS Beanstalk home page",src:a(383).default})),Object(r.b)("p",null,"Enter the name of your application, choose the ",Object(r.b)("em",{parentName:"p"},"Node.js")," platform and select the ",Object(r.b)("em",{parentName:"p"},"Sample Application"),"."),Object(r.b)("p",null,Object(r.b)("img",{alt:"Create Application page",src:a(384).default})),Object(r.b)("p",null,"AWS creates and loads the new application. ",Object(r.b)("strong",{parentName:"p"},"This takes a few minutes"),". Then check that the application ",Object(r.b)("em",{parentName:"p"},"health")," is ok and open the application."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"If the health is incorrect, click on the ",Object(r.b)("em",{parentName:"p"},"Causes")," button to see what happened.")),Object(r.b)("p",null,Object(r.b)("img",{alt:"Dashboard",src:a(385).default})),Object(r.b)("p",null,"The home page should look like this:"),Object(r.b)("p",null,Object(r.b)("img",{alt:"Sample Application",src:a(386).default})),Object(r.b)("p",null,"Now it is time to configure your environment and add a database. Click on the ",Object(r.b)("em",{parentName:"p"},"Configuration")," button and set the environment variables ",Object(r.b)("inlineCode",{parentName:"p"},"NODE_ENV")," and ",Object(r.b)("inlineCode",{parentName:"p"},"DATABASE_SYNCHRONIZE"),"."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"The ",Object(r.b)("inlineCode",{parentName:"p"},"NODE_ENV")," variable tells FoalTS to look at the production configuration (for example ",Object(r.b)("inlineCode",{parentName:"p"},"config/production.json"),")."),Object(r.b)("p",{parentName:"blockquote"},"The ",Object(r.b)("inlineCode",{parentName:"p"},"DATABASE_SYNCHRONIZE")," variable tells TypeORM not to update the database schema on every application launch (see section ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#Generate-&-Run-the-Database-Migrations"}),"Generate & Run the Database Migrations")," below).")),Object(r.b)("p",null,Object(r.b)("img",{alt:"Configuration Overview",src:a(387).default})),Object(r.b)("p",null,Object(r.b)("img",{alt:"Software Configuration",src:a(388).default})),Object(r.b)("p",null,"Then create a new database from the configuration page."),Object(r.b)("p",null,Object(r.b)("img",{alt:"Configuration Overview",src:a(389).default})),Object(r.b)("p",null,"Choose the database engine (postgres in this example) and enter the production database credentials."),Object(r.b)("p",null,Object(r.b)("img",{alt:"Database Page",src:a(390).default})),Object(r.b)("h2",{id:"deploy-the-foal-application"},"Deploy the Foal Application"),Object(r.b)("p",null,"Build the app."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"npm run build:app\n")),Object(r.b)("p",null,"Create an archive from the directories and files ",Object(r.b)("inlineCode",{parentName:"p"},"build/"),", ",Object(r.b)("inlineCode",{parentName:"p"},"config/"),", ",Object(r.b)("inlineCode",{parentName:"p"},"public/"),", ",Object(r.b)("inlineCode",{parentName:"p"},"ormconfig.json"),", ",Object(r.b)("inlineCode",{parentName:"p"},"package-lock.json")," and ",Object(r.b)("inlineCode",{parentName:"p"},"package.json"),"."),Object(r.b)("p",null,Object(r.b)("img",{alt:"File compression",src:a(391).default})),Object(r.b)("p",null,"Upload the archive to AWS."),Object(r.b)("p",null,Object(r.b)("img",{alt:"Upload the archive",src:a(392).default}),"\n",Object(r.b)("img",{alt:"Upload the archive",src:a(393).default})),Object(r.b)("p",null,"The application restarts. This may take a few minutes."),Object(r.b)("h2",{id:"generate--run-the-database-migrations"},"Generate & Run the Database Migrations"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Warning, warning: this section is only compatible with projects created with FoalTS v0.8. If you need a tutorial for v1 and above, feel free to open a Github issue for that.")),Object(r.b)("p",null,"Migrations are SQL queries that modify the database schemas (definition of the tables, relations, etc). By default, every new Foal project is created with the option ",Object(r.b)("inlineCode",{parentName:"p"},"synchronize: true")," in its ",Object(r.b)("inlineCode",{parentName:"p"},"ormconfig"),". This setting updates the database schema on every launch of the application."),Object(r.b)("p",null,"But using this in production is considered unsafe (data could be lost for example if a model is changed by mistake). That's why we will generate and run migrations manually. To do this, we will need access to the database."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"Warning")," This section assumes that you have previously set the environment variable ",Object(r.b)("inlineCode",{parentName:"p"},"DATABASE_SYNCHRONIZE")," to ",Object(r.b)("inlineCode",{parentName:"p"},"false"),". This overrides the ",Object(r.b)("inlineCode",{parentName:"p"},"synchronize")," setting on AWS.")),Object(r.b)("p",null,"Go to ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://console.aws.amazon.com/rds/home#databases:"}),"AWS database page")," and click on your database."),Object(r.b)("p",null,Object(r.b)("img",{alt:"AWS database page",src:a(394).default})),Object(r.b)("p",null,"Save the URL endpoint and click on the VPC security group. We will tell AWS that we can access the database from our local host."),Object(r.b)("p",null,Object(r.b)("img",{alt:"AWS database page",src:a(395).default})),Object(r.b)("p",null,"Add a new ",Object(r.b)("em",{parentName:"p"},"inbound")," rule. ",Object(r.b)("strong",{parentName:"p"},"Make sure you don't delete the one that already exists.")),Object(r.b)("p",null,Object(r.b)("img",{alt:"VPC security group",src:a(396).default})),Object(r.b)("p",null,Object(r.b)("img",{alt:"VPC security group (rules)",src:a(397).default})),Object(r.b)("p",null,"You are now able to communicate from your local host with the production database  (as long as you provide the correct credentials)."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"The next part of the tutorial assumes that you did not change the default option ",Object(r.b)("inlineCode",{parentName:"p"},"synchronize: true")," in the ",Object(r.b)("inlineCode",{parentName:"p"},"ormconfig")," file. This is probably the case if you have never had to deal with migrations before.")),Object(r.b)("p",null,"Open ",Object(r.b)("strong",{parentName:"p"},"a new terminal/console"),"."),Object(r.b)("p",null,"Enter the database credentials."),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"On Mac and Linux")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sh"}),"export DATABASE_HOST=<the previous saved endpoint>\nexport DATABASE_USERNAME=<the database username> # in the tutorial, it is myusername\nexport DATABASE_PASSWORD=<the database password>\nexport DATABASE_NAME=ebdb\n")),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"On Windows")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sh"}),"set DATABASE_HOST=<the previous saved endpoint>\nset DATABASE_USERNAME=<the database username> # in the tutorial, it is myusername\nset DATABASE_PASSWORD=<the database password>\nset DATABASE_NAME=ebdb\n")),Object(r.b)("p",null,"Generate the migration."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sh"}),"npm run migration:generate -- --name first-migration\n")),Object(r.b)("p",null,"A new migration file appears in ",Object(r.b)("inlineCode",{parentName:"p"},"src/migrations/"),". Check that it is correct and then build it."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sh"}),"npm run build:migrations\n")),Object(r.b)("p",null,"Then run the migration."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sh"}),"npm run migration:run\n")),Object(r.b)("p",null,"The database schema is updated. Your remote application should now run properly."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Close your terminal / console"),". Do not start your local application in the same terminal, otherwise it will run on your production database."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"Caution:")," Running migrations is always sensitive part of deployments. You should always back up your data before doing such a thing.")))}l.isMDXComponent=!0},266:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return m}));var n=a(0),o=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var p=o.a.createContext({}),l=function(e){var t=o.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},b=function(e){var t=l(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),b=l(a),d=n,m=b["".concat(s,".").concat(d)]||b[d]||u[d]||r;return a?o.a.createElement(m,i(i({ref:t},p),{},{components:a})):o.a.createElement(m,i({ref:t},p))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,s=new Array(r);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var p=2;p<r;p++)s[p]=a[p];return o.a.createElement.apply(null,s)}return o.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"},383:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/aws1-8e36cc54e3a8df70b6939fddc5fe69e9.png"},384:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/aws2-a2aeaf3fa13eb427c83b25fbd5f0fd89.png"},385:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/aws3-4f4fa51399f283d768c7a71dad4e1dfd.png"},386:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/aws4-205d0160bf165339eb387b54c8343b6e.png"},387:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/aws5-cd92a1a826d5aee626c37f75d400d43a.png"},388:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/aws6-71487d0874c8bcd18cf5cd0a75d8b0d0.png"},389:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/aws7-b8d41622926735f0fcc236f1c431be95.png"},390:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/aws8-a89cc1acd85d857a6869c097dc354e04.png"},391:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/aws9-4b34c54819c88c385469c69cdfabf2af.png"},392:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/aws10-6d51005ac43c407895543aa92fb37693.png"},393:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/aws11-77640fb0eb9bd0abf66bb1f1e684ab66.png"},394:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/aws12-3fbd62cda7c19292f9d61c058e534ab6.png"},395:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/aws13-13929466f6a103691a81caab58042245.png"},396:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/aws14-55cbcfd32f00835479e6430ea6fbce28.png"},397:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/aws15-2016e4a621bad8bdcc1cb107774af1ff.png"}}]);