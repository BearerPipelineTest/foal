(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{257:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var o=n(0),a=n.n(o);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),l=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):d(d({},t),e)),n},p=function(e){var t=l(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(n),b=o,m=p["".concat(i,".").concat(b)]||p[b]||u[b]||r;return n?a.a.createElement(m,d(d({ref:t},c),{},{components:n})):a.a.createElement(m,d({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=b;var d={};for(var s in t)hasOwnProperty.call(t,s)&&(d[s]=t[s]);d.originalType=e,d.mdxType="string"==typeof e?e:o,i[1]=d;for(var c=2;c<r;c++)i[c]=n[c];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},81:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return d})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return l}));var o=n(3),a=n(7),r=(n(0),n(257)),i={title:"Validation and Sanitization"},d={unversionedId:"tutorials/mongodb-todo-list/6-validation-and-sanitization",id:"version-1.x/tutorials/mongodb-todo-list/6-validation-and-sanitization",isDocsHomePage:!1,title:"Validation and Sanitization",description:"Currently inputs received by the server are not checked. Everyone could send anything when requesting POST /api/todos. That's why client inputs cannot be trusted.",source:"@site/versioned_docs/version-1.x/tutorials/mongodb-todo-list/6-validation-and-sanitization.md",slug:"/tutorials/mongodb-todo-list/6-validation-and-sanitization",permalink:"/docs/1.x/tutorials/mongodb-todo-list/6-validation-and-sanitization",editUrl:"https://github.com/FoalTS/foal/edit/master/docs/versioned_docs/version-1.x/tutorials/mongodb-todo-list/6-validation-and-sanitization.md",version:"1.x",sidebar:"someSidebar",previous:{title:"The REST API",permalink:"/docs/1.x/tutorials/mongodb-todo-list/5-the-rest-api"},next:{title:"Unit Testing",permalink:"/docs/1.x/tutorials/mongodb-todo-list/7-unit-testing"}},s=[],c={toc:s};function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Currently inputs received by the server are not checked. Everyone could send anything when requesting ",Object(r.b)("inlineCode",{parentName:"p"},"POST /api/todos"),". That's why client inputs cannot be trusted."),Object(r.b)("p",null,"You will use the ",Object(r.b)("inlineCode",{parentName:"p"},"\x1cValidateBody")," and ",Object(r.b)("inlineCode",{parentName:"p"},"ValidatePathParam")," hooks to validate and sanitize incoming data."),Object(r.b)("p",null,"A ",Object(r.b)("em",{parentName:"p"},"hook")," is a decorator that is attached to a route handler (a controller method). It is executed before the method and is therefore particularly suitable for validation or access control."),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"ValidateBody")," and ",Object(r.b)("inlineCode",{parentName:"p"},"ValidatePathParam")," check respectively the ",Object(r.b)("inlineCode",{parentName:"p"},"body")," and ",Object(r.b)("inlineCode",{parentName:"p"},"params")," properties of the request object. They take a schema as unique argument."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"FoalTS uses ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/epoberezkin/ajv"}),"Ajv"),", a fast JSON Schema validator, to define its schemas.")),Object(r.b)("p",null,"Let's add validation and sanitization to your application. In fact, you have already defined the todo schema in the ",Object(r.b)("inlineCode",{parentName:"p"},"create-todo")," script earlier."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),"import {\n  ...\n  ValidateBody, ValidatePathParam\n} from '@foal/core';\n\nexport class ApiController {\n\n  ...\n\n  @Post('/todos')\n  @ValidateBody({\n    // The body request should be an object once parsed by the framework.\n    // Every additional properties that are not defined in the \"properties\"\n    // object should be removed.\n    additionalProperties: false,\n    properties: {\n      // The \"text\" property of ctx.request.body should be a string if it exists.\n      text: { type: 'string' }\n    },\n    // The property \"text\" is required.\n    required: [ 'text' ],\n    type: 'object',\n  })\n  async postTodo(ctx: Context) {\n    const todo = new Todo();\n    todo.text = ctx.request.body.text;\n\n    await todo.save();\n\n    return new HttpResponseCreated(todo);\n  }\n\n  @Delete('/todos/:id')\n  // The id should be a string. If it is not, the hook returns a \"400 - Bad Request\" error.\n  @ValidatePathParam('id', { type: 'string' })\n  async deleteTodo(ctx: Context) {\n    const todo = await Todo.findById(ctx.request.params.id);\n    if (!todo) {\n      return new HttpResponseNotFound();\n    }\n    await Todo.findByIdAndDelete(ctx.request.params.id);\n    return new HttpResponseNoContent();\n  }\n\n}\n\n")))}l.isMDXComponent=!0}}]);