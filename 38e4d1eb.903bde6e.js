(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{120:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return u})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return l}));var a=t(3),r=t(7),i=(t(0),t(251)),o={title:"Generate & Run Migrations"},u={unversionedId:"databases/generate-and-run-migrations",id:"version-1.x/databases/generate-and-run-migrations",isDocsHomePage:!1,title:"Generate & Run Migrations",description:"Database migrations are a way of propagating changes you make to your entities into your database schema. The changes you make to your models (adding a field, deleting an entity, etc.) do not automatically modify your database. You have to do it yourself.",source:"@site/versioned_docs/version-1.x/databases/generate-and-run-migrations.md",slug:"/databases/generate-and-run-migrations",permalink:"/docs/1.x/databases/generate-and-run-migrations",editUrl:"https://github.com/FoalTS/foal/edit/master/docs/versioned_docs/version-1.x/databases/generate-and-run-migrations.md",version:"1.x",sidebar:"someSidebar",previous:{title:"Create Models & Queries",permalink:"/docs/1.x/databases/create-models-and-queries"},next:{title:"MongoDB",permalink:"/docs/1.x/databases/mongodb"}},s=[{value:"The Commands",id:"the-commands",children:[{value:"Generating Migrations Automatically",id:"generating-migrations-automatically",children:[]},{value:"Run the migrations",id:"run-the-migrations",children:[]},{value:"Revert the last migration",id:"revert-the-last-migration",children:[]},{value:"A Complete Example",id:"a-complete-example",children:[]}]},{value:"The <code>synchronize</code> and <code>dropSchema</code> options",id:"the-synchronize-and-dropschema-options",children:[]},{value:"Advanced",id:"advanced",children:[]}],c={toc:s};function l(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Database migrations are a way of propagating changes you make to your entities into your database schema. The changes you make to your models (adding a field, deleting an entity, etc.) do not automatically modify your database. You have to do it yourself."),Object(i.b)("p",null,"You have two options: update the database schema manually (using database software, for example) or run migrations."),Object(i.b)("p",null,"Migrations are a programmatic technique for updating or reverting a database schema in a predictable and repeatable way. They are defined with classes, each of which has an ",Object(i.b)("inlineCode",{parentName:"p"},"up")," method and a ",Object(i.b)("inlineCode",{parentName:"p"},"down")," method. The first one contains SQL queries to update the database schema to reflect the new models. The second contains SQL queries to revert the changes made by the ",Object(i.b)("inlineCode",{parentName:"p"},"up")," method."),Object(i.b)("p",null,"Theses classes are located in separate files in the ",Object(i.b)("inlineCode",{parentName:"p"},"src/migrations")," directory."),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Example of a migration file")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'import { MigrationInterface, QueryRunner } from \'typeorm\';\n\nexport class PostRefactoringTIMESTAMP implements MigrationInterface {\n    \n    async up(queryRunner: QueryRunner): Promise<any> {\n        await queryRunner.query(`ALTER TABLE "post" RENAME COLUMN "title" TO "name"`);\n    }\n\n    async down(queryRunner: QueryRunner): Promise<any> { \n        await queryRunner.query(`ALTER TABLE "post" RENAME COLUMN "name" TO "title"`); // reverts things made in "up" method\n    }\n}\n')),Object(i.b)("h2",{id:"the-commands"},"The Commands"),Object(i.b)("h3",{id:"generating-migrations-automatically"},"Generating Migrations Automatically"),Object(i.b)("p",null,"Usually, you do not need to write migrations manually. TypeORM offers a powerful feature to generate your migration files based on the changes you make to your entities."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"---\ntitle: Build the entities\n---\nnpm run build:app\n---\ntitle: Generate the migration file based on the entities changes\n---\nnpm run migration:generate -- -n name-of-this-migration\n---\ntitle: Build the migration files\n---\nnpm run build:migrations\n")),Object(i.b)("h3",{id:"run-the-migrations"},"Run the migrations"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"npm run migration:run\n")),Object(i.b)("h3",{id:"revert-the-last-migration"},"Revert the last migration"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"npm run migration:revert\n")),Object(i.b)("h3",{id:"a-complete-example"},"A Complete Example"),Object(i.b)("p",null,"\xa0","1. Create a new ",Object(i.b)("inlineCode",{parentName:"p"},"User")," entity."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"import { Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n\n  @PrimaryGeneratedColumn()\n  id: number;\n\n}\n")),Object(i.b)("p",null,"\xa0","2. Build the application."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"npm run build:app\n")),Object(i.b)("p",null,"\xa0","3. Generate a migration file."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"npm run migration:generate -- --name add-user\n")),Object(i.b)("p",null,"A new file ",Object(i.b)("inlineCode",{parentName:"p"},"xxx-add-user.ts")," appears in ",Object(i.b)("inlineCode",{parentName:"p"},"src/directory"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'import {MigrationInterface, QueryRunner} from "typeorm";\n\nexport class addUser1561976236112 implements MigrationInterface {\n\n    public async up(queryRunner: QueryRunner): Promise<any> {\n        await queryRunner.query(`CREATE TABLE "user" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL)`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise<any> {\n        await queryRunner.query(`DROP TABLE "user"`);\n    }\n\n}\n\n')),Object(i.b)("p",null,"\xa0","4. Build and run the migration."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"npm run build:migrations\nnpm run migration:run\n")),Object(i.b)("p",null,"\xa0","5. Add new columns to the entity."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"import { hashPassword } from '@foal/core';\nimport { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column()\n  password: string;\n\n  async setPassword(password: string) {\n    this.password = await hashPassword(password);\n  }\n\n}\n\n")),Object(i.b)("p",null,"\xa0","6. Build the application."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"npm run build:app\n")),Object(i.b)("p",null,"\xa0","7. Generate another migration file."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"npm run migration:generate -- --name add-email-and-password\n")),Object(i.b)("p",null,"Another file ",Object(i.b)("inlineCode",{parentName:"p"},"xxx-add-email-and-password.ts")," appears in ",Object(i.b)("inlineCode",{parentName:"p"},"src/directory"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'import {MigrationInterface, QueryRunner} from "typeorm";\n\nexport class addEmailAndPassword1561981516514 implements MigrationInterface {\n\n    public async up(queryRunner: QueryRunner): Promise<any> {\n        await queryRunner.query(`CREATE TABLE "temporary_user" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "email" varchar NOT NULL, "password" varchar NOT NULL, CONSTRAINT "UQ_ed766a9782779b8390a2a81f444" UNIQUE ("email"))`);\n        await queryRunner.query(`INSERT INTO "temporary_user"("id") SELECT "id" FROM "user"`);\n        await queryRunner.query(`DROP TABLE "user"`);\n        await queryRunner.query(`ALTER TABLE "temporary_user" RENAME TO "user"`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise<any> {\n        await queryRunner.query(`ALTER TABLE "user" RENAME TO "temporary_user"`);\n        await queryRunner.query(`CREATE TABLE "user" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL)`);\n        await queryRunner.query(`INSERT INTO "user"("id") SELECT "id" FROM "temporary_user"`);\n        await queryRunner.query(`DROP TABLE "temporary_user"`);\n    }\n\n}\n\n')),Object(i.b)("p",null,"\xa0","8. Build and run the migration."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"npm run build:migrations\nnpm run migration:run\n")),Object(i.b)("h2",{id:"the-synchronize-and-dropschema-options"},"The ",Object(i.b)("inlineCode",{parentName:"h2"},"synchronize")," and ",Object(i.b)("inlineCode",{parentName:"h2"},"dropSchema")," options"),Object(i.b)("p",null,"These two options are particularly useful for testing."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"synchronize")," - Indicates if database schema should be auto created on every application launch."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dropSchema")," - Drops the schema each time connection is being established.")),Object(i.b)("p",null,"Using the ",Object(i.b)("inlineCode",{parentName:"p"},"synchronize")," option for production is not recommended as you could loose data by mistake."),Object(i.b)("h2",{id:"advanced"},"Advanced"),Object(i.b)("p",null,"The ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"http://typeorm.io/#/migrations"}),"TypeORM documentation")," gives more details on how to write migrations."))}l.isMDXComponent=!0},251:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return b}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=r.a.createContext({}),l=function(e){var n=r.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},p=function(e){var n=l(e.components);return r.a.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(t),d=a,b=p["".concat(o,".").concat(d)]||p[d]||m[d]||i;return t?r.a.createElement(b,u(u({ref:n},c),{},{components:t})):r.a.createElement(b,u({ref:n},c))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var u={};for(var s in n)hasOwnProperty.call(n,s)&&(u[s]=n[s]);u.originalType=e,u.mdxType="string"==typeof e?e:a,o[1]=u;for(var c=2;c<i;c++)o[c]=t[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);