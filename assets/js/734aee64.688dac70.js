(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8198],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(t),m=a,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return t?r.createElement(g,c(c({ref:n},p),{},{components:t})):r.createElement(g,c({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,c=new Array(o);c[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var l=2;l<o;l++)c[l]=t[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8215:function(e,n,t){"use strict";var r=t(7294);n.Z=function(e){var n=e.children,t=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",hidden:t,className:a},n)}},1395:function(e,n,t){"use strict";t.d(n,{Z:function(){return p}});var r=t(7294),a=t(944),o=t(6010),c="tabItem_1uMI",i="tabItemActive_2DSg";var s=37,l=39;var p=function(e){var n=e.lazy,t=e.block,p=e.defaultValue,u=e.values,d=e.groupId,m=e.className,g=(0,a.Z)(),v=g.tabGroupChoices,f=g.setTabGroupChoices,h=(0,r.useState)(p),k=h[0],y=h[1],N=r.Children.toArray(e.children),b=[];if(null!=d){var w=v[d];null!=w&&w!==k&&u.some((function(e){return e.value===w}))&&y(w)}var C=function(e){var n=e.currentTarget,t=b.indexOf(n),r=u[t].value;y(r),null!=d&&(f(d,r),setTimeout((function(){var e,t,r,a,o,c,s,l;(e=n.getBoundingClientRect(),t=e.top,r=e.left,a=e.bottom,o=e.right,c=window,s=c.innerHeight,l=c.innerWidth,t>=0&&o<=l&&a<=s&&r>=0)||(n.scrollIntoView({block:"center",behavior:"smooth"}),n.classList.add(i),setTimeout((function(){return n.classList.remove(i)}),2e3))}),150))},S=function(e){var n,t;switch(e.keyCode){case l:var r=b.indexOf(e.target)+1;t=b[r]||b[0];break;case s:var a=b.indexOf(e.target)-1;t=b[a]||b[b.length-1]}null==(n=t)||n.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},m)},u.map((function(e){var n=e.value,t=e.label;return r.createElement("li",{role:"tab",tabIndex:k===n?0:-1,"aria-selected":k===n,className:(0,o.Z)("tabs__item",c,{"tabs__item--active":k===n}),key:n,ref:function(e){return b.push(e)},onKeyDown:S,onFocus:C,onClick:C},t)}))),n?(0,r.cloneElement)(N.filter((function(e){return e.props.value===k}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},N.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==k})}))))}},9443:function(e,n,t){"use strict";var r=(0,t(7294).createContext)(void 0);n.Z=r},944:function(e,n,t){"use strict";var r=t(7294),a=t(9443);n.Z=function(){var e=(0,r.useContext)(a.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e}},1018:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return u},toc:function(){return d},default:function(){return g}});var r=t(2122),a=t(9756),o=(t(7294),t(3905)),c=t(1395),i=t(8215),s=["components"],l={title:"Services & Dependency Injection"},p=void 0,u={unversionedId:"architecture/services-and-dependency-injection",id:"architecture/services-and-dependency-injection",isDocsHomePage:!1,title:"Services & Dependency Injection",description:"`sh",source:"@site/docs/architecture/services-and-dependency-injection.md",sourceDirName:"architecture",slug:"/architecture/services-and-dependency-injection",permalink:"/docs/architecture/services-and-dependency-injection",editUrl:"https://github.com/FoalTS/foal/edit/master/docs/docs/architecture/services-and-dependency-injection.md",version:"current",frontMatter:{title:"Services & Dependency Injection"},sidebar:"someSidebar",previous:{title:"Controllers",permalink:"/docs/architecture/controllers"},next:{title:"Hooks",permalink:"/docs/architecture/hooks"}},d=[{value:"Description",id:"description",children:[]},{value:"Architecture",id:"architecture",children:[]},{value:"Use &amp; Dependency Injection",id:"use--dependency-injection",children:[]},{value:"Testing services",id:"testing-services",children:[{value:"Services (or Controllers) with Dependencies",id:"services-or-controllers-with-dependencies",children:[]}]},{value:"Injecting other Instances",id:"injecting-other-instances",children:[]},{value:"Abstract Services",id:"abstract-services",children:[{value:"Default Concrete Services",id:"default-concrete-services",children:[]}]},{value:"Usage with Interfaces and Generic Classes",id:"usage-with-interfaces-and-generic-classes",children:[]},{value:"Accessing the <code>ServiceManager</code>",id:"accessing-the-servicemanager",children:[]}],m={toc:d};function g(e){var n=e.components,t=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"foal generate service my-service\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export class MyService {\n\n}\n")),(0,o.kt)("h2",{id:"description"},"Description"),(0,o.kt)("p",null,"Services are useful to organize your code in domains. They can be used in a wide variety of situations: logging, interaction with a database, calculations, communication with an external API, etc."),(0,o.kt)("h2",{id:"architecture"},"Architecture"),(0,o.kt)("p",null,"Basically, a service can be any class with a narrow and well defined purpose. They are instantiated as singletons."),(0,o.kt)("h2",{id:"use--dependency-injection"},"Use & Dependency Injection"),(0,o.kt)("p",null,"You can access a service from a controller using the ",(0,o.kt)("inlineCode",{parentName:"p"},"@dependency")," decorator."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { dependency, Get, HttpResponseOK } from '@foal/core';\n\nclass Logger {\n  log(message: string) {\n    console.log(`${new Date()} - ${message}`);\n  }\n}\n\nclass AppController {\n  @dependency\n  logger: Logger\n\n  @Get('/')\n  index() {\n    this.logger.log('index has been called!');\n    return new HttpResponseOK('Hello world!');\n  }\n\n}\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"When instantiating the controller, FoalTS will provide the service instance. This mechanism is called ",(0,o.kt)("em",{parentName:"p"},"dependency injection")," and is particularly interesting in unit testing (see section below).")),(0,o.kt)("p",null,"In the same way, you can access a service from another service."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { dependency } from '@foal/core';\n\nclass MyService {\n  run() {\n    console.log('hello world');\n  }\n}\n\nclass MyServiceA {\n  @dependency\n  myService: MyService;\n\n  foo() {\n    this.myService.run();\n  }\n}\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Dependencies are injected after the instantiation of the controller/service. So they will appear as ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined")," if you try to read them inside a constructor. If you want to access the dependencies when initializing a controller/service, refer to the ",(0,o.kt)("a",{parentName:"p",href:"/docs/architecture/initialization"},(0,o.kt)("inlineCode",{parentName:"a"},"boot")," method"),".")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Circular dependencies are not supported. In most cases, when two services are dependent on each other, the creation of a third service containing the functionalities required by both services solves the dependency problem.")),(0,o.kt)("h2",{id:"testing-services"},"Testing services"),(0,o.kt)("p",null,"Services are classes and so can be tested as is."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// calculator.service.ts\nexport class CalculatorService {\n  sum(a: number, b: number): number {\n    return a + b;\n  }\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// calculator.service.spec.ts\nimport { strictEqual } from 'assert';\nimport { CalculatorService } from './calculator.service';\n\nit('CalculatorService', () => {\n  const service = new CalculatorService();\n  strictEqual(service.sum(1, 2), 3);\n});\n")),(0,o.kt)("h3",{id:"services-or-controllers-with-dependencies"},"Services (or Controllers) with Dependencies"),(0,o.kt)("p",null,"If your service has dependencies, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"createService")," function to instantiate the service with them."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// weather.service.ts\nimport { dependency } from '@foal/core';\n\nclass ConversionService {\n  celsiusToFahrenheit(temperature: number): number {\n    return temperature * 9 / 5 + 32;\n  }\n}\n\nclass WeatherService {\n  temp = 14;\n\n  @dependency\n  conversion: ConversionService;\n\n  getWeather(): string {\n    const temp = this.conversion.celsiusToFahrenheit(this.temp);\n    return `The outside temperature is ${temp} \xb0F.`;\n  }\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// weather.service.spec.ts\nimport { strictEqual } from 'assert';\nimport { createService } from '@foal/core';\nimport { WeatherService } from './weather.service';\n\nit('WeatherService', () => {\n  const service = createService(WeatherService);\n\n  const expected = 'The outside temperature is 57.2 \xb0F.';\n  const actual = service.getWeather();\n\n  strictEqual(actual, expected);\n});\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"A similar function exists to instantiate controllers with their dependencies: ",(0,o.kt)("inlineCode",{parentName:"p"},"createController"),".")),(0,o.kt)("p",null,"In many situations, it is necessary to mock the dependencies to truly write ",(0,o.kt)("em",{parentName:"p"},"unit")," tests. This can be done by passing a second argument to ",(0,o.kt)("inlineCode",{parentName:"p"},"createService")," (or ",(0,o.kt)("inlineCode",{parentName:"p"},"createController"),")."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// detector.service.ts\nimport { dependency } from '@foal/core';\n\nclass TwitterService {\n  fetchLastTweets(): { msg: string }[] {\n    // Make a call to the Twitter API to get the last tweets.\n    return [];\n  }\n}\n\nclass DetectorService {\n  @dependency\n  twitter: TwitterService;\n\n  isFoalTSMentionedInTheLastTweets() {\n    const tweets = this.twitter.fetchLastTweets();\n    if (tweets.find(tweet => tweet.msg.includes('FoalTS'))) {\n      return true;\n    }\n    return false;\n  }\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// detector.service.spec.ts\nimport { strictEqual } from 'assert';\nimport { createService } from '@foal/core';\nimport { DetectorService } from './weather.service';\n\nit('DetectorService', () => {\n  const twitterMock = {\n    fetchLastTweets() {\n      return [\n        { msg: 'Hello world!' },\n        { msg: 'I LOVE FoalTS' },\n      ]\n    }\n  }\n  const service = createService(DetectorService, {\n    twitter: twitterMock\n  });\n\n  const actual = service.isFoalTSMentionedInTheLastTweets();\n\n  strictEqual(actual, true);\n});\n")),(0,o.kt)("h2",{id:"injecting-other-instances"},"Injecting other Instances"),(0,o.kt)("p",null,"To manually inject instances into the identity mapper, you can also provide your own ",(0,o.kt)("inlineCode",{parentName:"p"},"ServiceManager")," to the ",(0,o.kt)("inlineCode",{parentName:"p"},"createApp")," function (usually located at ",(0,o.kt)("inlineCode",{parentName:"p"},"src/index.ts"),")."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"src/index.ts (example)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createApp, ServiceManager } from '@foal/core';\nimport { Connection, createConnection } from 'typeorm';\n\nimport { AppController } from './app/app.controller';\n\nasync function main() {\n  const connection = await createConnection();\n\n  const serviceManager = new ServiceManager();\n  serviceManager.set(Connection, connection);\n\n  const app = await createApp(AppController, {\n    serviceManager\n  });\n\n  // ...\n}\n\n// ...\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: Interfaces cannot be passed to the ",(0,o.kt)("inlineCode",{parentName:"p"},"set")," method.")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"src/controllers/api.controller.ts (example)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { dependency, Get, HttpResponseOK } from '@foal/core';\nimport { Connection } from 'typeorm';\n\nimport { Product } from '../entities';\n\nclass ApiController {\n\n  @dependency\n  connection: Connection;\n\n  @Get('/products')\n  async readProducts()\xa0{\n    const products = await this.connection.getRepository(Product).find();\n    return new HttpResponseOK(products);\n  }\n\n}\n\n")),(0,o.kt)("h2",{id:"abstract-services"},"Abstract Services"),(0,o.kt)("p",null,"If you want to use a different service implementation depending on your environment (production, development, etc.), you can use an abstract service for this."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"logger.service.ts")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export abstract class Logger {\n  static concreteClassConfigPath = 'logger.driver';\n  static concreteClassName = 'ConcreteLogger';\n\n  abstract log(str: string): void;\n}\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Warning:")," the two properties must be static.")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"console-logger.service.ts (concrete service)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export class ConsoleLogger extends Logger {\n  log(str: string) {\n    console.log(str);\n  }\n}\n\nexport { ConsoleLogger as ConcreteLogger };\n")),(0,o.kt)(c.Z,{defaultValue:"yaml",values:[{label:"YAML",value:"yaml"},{label:"JSON",value:"json"},{label:"JS",value:"js"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"yaml",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"logger:\n  driver: ./app/services/console-logger.service\n"))),(0,o.kt)(i.Z,{value:"json",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "logger": {\n    "driver": "./app/services/console-logger.service"\n  }\n}\n'))),(0,o.kt)(i.Z,{value:"js",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'module.exports = {\n  logger: {\n    driver: "./app/services/console-logger.service"\n  }\n}\n')))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The configuration value can be a package name or a path relative to the ",(0,o.kt)("inlineCode",{parentName:"p"},"src/")," directory. If it is a path, it ",(0,o.kt)("strong",{parentName:"p"},"must")," start with ",(0,o.kt)("inlineCode",{parentName:"p"},"./")," and ",(0,o.kt)("strong",{parentName:"p"},"must not")," have an extension (",(0,o.kt)("inlineCode",{parentName:"p"},".js"),", ",(0,o.kt)("inlineCode",{parentName:"p"},".ts"),", etc).")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"a random service")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export class Service {\n  @dependency\n  logger: Logger;\n\n  // ...\n}\n")),(0,o.kt)("h3",{id:"default-concrete-services"},"Default Concrete Services"),(0,o.kt)("p",null,"An abstract service can have a default concrete service that is used when no configuration value is specified or when the configuration value is ",(0,o.kt)("inlineCode",{parentName:"p"},"local"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { join } from 'path';\n\nexport abstract class Logger {\n  static concreteClassConfigPath = 'logger.driver';\n  static concreteClassName = 'ConcreteLogger';\n  static defaultConcreteClassPath = join(__dirname, './console-logger.service');\n\n  abstract log(str: string): void;\n}\n")),(0,o.kt)("h2",{id:"usage-with-interfaces-and-generic-classes"},"Usage with Interfaces and Generic Classes"),(0,o.kt)("p",null,"Interfaces and generic classes can be injected using strings as IDs. To do this, you will need the ",(0,o.kt)("inlineCode",{parentName:"p"},"@Dependency")," decorator."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"src/services/logger.interface.ts")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface ILogger {\n  log(message: any): void;\n}\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"src/services/logger.service.ts")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ILogger } from './logger.interface';\n\nexport class ConsoleLogger implements ILogger {\n  log(message: any): void {\n    console.log(message);\n  }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"src/index.ts (example)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createApp, ServiceManager } from '@foal/core';\nimport { createConnection } from 'typeorm';\n\nimport { AppController } from './app/app.controller';\nimport { Product } from './app/entities';\nimport { ConsoleLogger } from './app/services';\n\nasync function main() {\n  const connection = await createConnection();\n  const productRepository = connection.getRepository(Product);\n\n  const serviceManager = new ServiceManager()\n    .set('product', productRepository)\n    .set('logger', new ConsoleLogger());\n\n  const app = await createApp(AppController, {\n    serviceManager\n  });\n\n  // ...\n}\n\n// ...\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"src/controllers/api.controller.ts (example)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Dependency, Get, HttpResponseOK } from '@foal/core';\nimport { Repository } from 'typeorm';\n\nimport { Product } from '../entities';\nimport { ILogger } from '../services';\n\nexport class ApiController {\n\n  @Dependency('product')\n  productRepository: Repository<Product>;\n\n  @Dependency('logger')\n  logger: ILogger;\n\n  @Get('/products')\n  async readProducts()\xa0{\n    const products = await this.productRepository.find();\n    this.logger.log(products);\n    return new HttpResponseOK(products);\n  }\n\n}\n\n")),(0,o.kt)("h2",{id:"accessing-the-servicemanager"},"Accessing the ",(0,o.kt)("inlineCode",{parentName:"h2"},"ServiceManager")),(0,o.kt)("p",null,"In very rare situations, you may want to access the ",(0,o.kt)("inlineCode",{parentName:"p"},"ServiceManager")," which is the identity mapper that contains all the service instances."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { dependency, Get, HttpResponseOK, ServiceManager } from '@foal/core';\n\nclass MyService {\n  foo() {\n    return 'foo';\n  }\n}\n\nclass MyController {\n  @dependency\n  services: ServiceManager;\n\n  @Get('/bar')\n  bar() {\n    const msg = this.services.get(MyService).foo();\n    return new HttpResponseOK(msg);\n  }\n}\n")))}g.isMDXComponent=!0},6010:function(e,n,t){"use strict";function r(e){var n,t,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=r(e[n]))&&(a&&(a+=" "),a+=t);else for(n in e)e[n]&&(a&&(a+=" "),a+=n);return a}function a(){for(var e,n,t=0,a="";t<arguments.length;)(e=arguments[t++])&&(n=r(e))&&(a&&(a+=" "),a+=n);return a}t.d(n,{Z:function(){return a}})}}]);